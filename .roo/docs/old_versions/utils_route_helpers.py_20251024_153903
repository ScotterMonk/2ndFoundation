# -*- coding: utf-8 -*-
"""
Route helper utilities for standardized handling of admin/user utility results.

Provides small helpers used by routes to interpret utility return values and
perform the appropriate response: render a template, flash+redirect, or return JSON.

# Created by Roo | 2025-10-16
"""

from typing import Any, Dict, Optional
from urllib.parse import urlparse, urljoin
from flask import render_template, redirect, url_for, flash, jsonify, request, current_app


def _flash_message(message: Optional[str], category: Optional[str]) -> None:
    """Flash a message if provided."""
    # Created by Roo | 2025-10-16
    if message:
        flash(message, category or "info")


def handle_util_result(result: Dict[str, Any], redirect_url: Optional[str] = None):
    """
    Handle a utility result dictionary with common keys:
      - success: bool
      - template: str (jinja template path)
      - data: dict (context for template)
      - message: str (flash message)
      - message_type: str ('success' | 'info' | 'warning' | 'error')
      - redirect: str (endpoint name or absolute URL)

    If template present: render it.
    Else if redirect present: flash and redirect there.
    Else if redirect_url provided: flash and redirect to redirect_url.
    Else if result looks like JSON payload: return jsonify(result).
    """
    # Created by Roo | 2025-10-16
    if not isinstance(result, dict):
        return result  # fallback passthrough

    success = result.get("success", True)
    message = result.get("message")
    category = result.get("message_type") or ("success" if success else "error")

    # Render template if provided
    if "template" in result:
        _flash_message(message, category)
        context = result.get("data") or {}
        return render_template(result["template"], **context)

    # Redirect if specified by the util
    if "redirect" in result and result["redirect"]:
        _flash_message(message, category)
        target = result["redirect"]
        # If target looks like a URL path, redirect directly; otherwise treat as endpoint name
        if target.startswith("/") or target.startswith("http"):
            return redirect(target)
        return redirect(url_for(target))

    # Fallback redirect if provided by caller
    if redirect_url:
        _flash_message(message, category)
        return redirect(redirect_url)

    # As a final fallback, return JSON for API-like responses
    return jsonify(result)


def handle_simple_util_result(result: Dict[str, Any], default_template: str):
    """
    Simpler handler when a route expects to render a known template,
    using the util's returned 'data' context. If the util returned a redirect or message,
    defer to handle_util_result for correct behavior.
    """
    # Created by Roo | 2025-10-16
    if not isinstance(result, dict):
        return result

    # If util wants redirect/template handling, delegate to the general handler
    if any(k in result for k in ("template", "redirect", "message", "message_type")):
        return handle_util_result(result)

    # Otherwise render the default template with provided data
    context = result.get("data") or {}
    return render_template(default_template, **context)


def handle_delete_result(success: bool, message: str, message_type: str, redirect_url: str):
    """
    Specialized helper for delete operations returning (success, message, message_type).
    Always flashes and redirects to redirect_url.
    """
    # Created by Roo | 2025-10-16
    _flash_message(message, message_type or ("success" if success else "error"))
    # redirect_url may be a full URL or a path; treat as-is
    if redirect_url.startswith("/") or redirect_url.startswith("http"):
        return redirect(redirect_url)
    # else treat as endpoint name
    return redirect(url_for(redirect_url))


def is_ajax_request(request):
    """
    Checks if the request is an AJAX request.
    """
    # Created by Sonnet 4.5 | 2025-10-23
    return (
        request.headers.get('X-Requested-With') == 'XMLHttpRequest' or
        'application/json' in request.accept_mimetypes
    )


def build_multi_message_response(messages, redirect_url):
    """
    Flashes multiple messages and returns a redirect response.
    
    Args:
        messages (list): A list of tuples, where each tuple is (message_type, message_text).
        redirect_url (str): The URL to redirect to.
    """
    # Created by Sonnet 4.5 | 2025-10-23
    for message_type, message_text in messages:
        flash(message_text, message_type)
    return redirect(redirect_url)


def sanitize_redirect_url(url, allowed_paths=None, default='/'):
    """
    Validates a redirect URL against a whitelist of allowed paths to prevent open redirect vulnerabilities.

    Args:
        url (str): The redirect URL to sanitize.
        allowed_paths (list, optional): A list of allowed path prefixes. Defaults to None.
        default (str, optional): The default URL to return if sanitation fails. Defaults to '/'.

    Returns:
        str: The sanitized URL or the default URL.
    """
    # Created by Sonnet 4.5 | 2025-10-23
    if not url or not isinstance(url, str):
        return default

    # Use urlparse to safely handle the URL
    parsed_url = urlparse(url)

    # Allow relative URLs or URLs with the same netloc as the app
    if not parsed_url.netloc or parsed_url.netloc == request.host:
        # If a whitelist of paths is provided, check against it
        if allowed_paths:
            for allowed_path in allowed_paths:
                # Construct the full allowed URL for comparison
                safe_url = urljoin(request.host_url, allowed_path)
                if urlparse(url).path.startswith(urlparse(safe_url).path):
                    return url
            # If no match in the whitelist, return default
            flash('Invalid redirect path specified.', 'warning')
            return url_for('admin.dashboard') # A safe, defined endpoint

        # If no specific whitelist, just return the relative path
        return parsed_url.path or default
        
    # If the netloc is different, it's an external redirect, deny it.
    flash('External redirects are not permitted.', 'warning')
    return default
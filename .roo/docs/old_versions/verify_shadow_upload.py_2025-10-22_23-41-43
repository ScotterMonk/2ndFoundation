# Created by Gemini 2.5 Pro | 2025-10-22
import requests
import os
import re
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Admin credentials from environment variables
ADMIN_EMAIL = os.getenv("USERS_01_EMAIL")
ADMIN_PASSWORD_HASH = os.getenv("USERS_01_PASSWORD")
BASE_URL = "http://localhost:5000"
LOGIN_URL = f"{BASE_URL}/auth/login?email={ADMIN_EMAIL}&password={ADMIN_PASSWORD_HASH}"
UPLOAD_URL = f"{BASE_URL}/admin/media"

# File to upload
FILE_PATH = "static/images/logo.png"

def run_upload_test():
    """
    Logs in and uploads a file to the media endpoint.
    """
    with requests.Session() as session:
        # 1. Log in using querystring authentication
        try:
            print(f"GET {LOGIN_URL} to log in via querystring...")
            login_response = session.get(LOGIN_URL)
            login_response.raise_for_status()
            
            # Check if login was successful by looking for a keyword on the dashboard
            if "Admin Dashboard" not in login_response.text:
                print("Login failed. Check credentials or login logic.")
                return
            print("Login successful.")
        except requests.exceptions.RequestException as e:
            print(f"Error during login: {e}")
            return

        # 4. Prepare and upload the file
        if not os.path.exists(FILE_PATH):
            print(f"File not found at {FILE_PATH}")
            return
            
        # Fetch CSRF token from media page
        try:
            media_page_response = session.get(UPLOAD_URL)
            media_page_response.raise_for_status()
            csrf_match = re.search(r'name="csrf_token"[^>]*value="([^"]+)"', media_page_response.text)
            if not csrf_match:
                print("Could not find CSRF token. Trying without it...")
                csrf_token = None
            else:
                csrf_token = csrf_match.group(1)
                print(f"CSRF token found: {csrf_token[:10]}...")
        except requests.exceptions.RequestException as e:
            print(f"Error fetching media page: {e}")
            return
            
        with open(FILE_PATH, 'rb') as f:
            files = {'file': (os.path.basename(FILE_PATH), f, 'image/png')}
            data = {'csrf_token': csrf_token} if csrf_token else {}
            
            try:
                print(f"POST to {UPLOAD_URL} to upload the file...")
                upload_response = session.post(UPLOAD_URL, files=files, data=data)
                
                # Print final response
                print("\n--- Upload Response ---")
                print(f"Status Code: {upload_response.status_code}")
                if upload_response.status_code == 200:
                    print("Upload successful! Check Terminal 4 for shadow mode logs.")
                elif upload_response.status_code in [302, 303]:
                    print(f"Upload redirected ({upload_response.status_code}). Check Terminal 4 for shadow mode logs.")
                else:
                    print(f"Upload failed with status {upload_response.status_code}")
                    print(f"Response preview: {upload_response.text[:500]}")
                
            except requests.exceptions.RequestException as e:
                print(f"Error during file upload: {e}")


if __name__ == "__main__":
    run_upload_test()

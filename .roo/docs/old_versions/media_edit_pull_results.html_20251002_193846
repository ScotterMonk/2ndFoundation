{% extends "layout.html" %}
{% block content %}
<div class="flex items-start justify-center bg-neutral-50 p-4">
    <div class="auth-form-wrapper" style="max-width: 1200px;">
        <div class="card">
            <div class="card-header">
                <div class="flex justify-between items-center">
                    <div>
                        <h2>IMDb Search Results</h2>
                        <p class="text-secondary" style="margin-bottom:0;">
                            Found {{ result_count }} result{{ 's' if result_count != 1 else '' }} for "{{ media_title
                            }}"
                        </p>
                    </div>
                    <a href="{{ url_for('admin.media_edit', media_id=media.id) }}" class="btn">
                        Back to Edit
                    </a>
                </div>
            </div>
            <div class="card-body">
                {% if search_results %}
                <div class="border border-light rounded-lg p-4 bg-neutral-50 overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead>
                            <tr class="border-b border-light bg-primary-50">
                                <th class="text-left px-0 py-1">Title</th>
                                <th class="text-center px-0 py-1">Year</th>
                                <th class="text-center px-0 py-1">Thumbnail</th>
                                <th class="text-left px-0 py-1">Description</th>
                                <th class="text-center px-0 py-1">IMDb ID</th>
                                <th class="text-center px-0 py-1">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for result in search_results %}
                            <tr
                                class="border-b border-light {% if loop.index is divisibleby(2) %}bg-neutral-50{% else %}bg-white{% endif %} hover:bg-primary-50">
                                <td class="p-3 font-semibold text-primary">{{ result.title }}</td>
                                <td class="text-center p-3">{{ result.year or '‚Äî' }}</td>
                                <td class="text-center p-3">
                                    {% if result.image_url %}
                                    <img src="{{ result.image_url }}" alt="{{ result.title }}"
                                        style="max-width: 280px; max-height:280px; display: inline-block;">
                                    {% endif %}
                                </td>
                                <td class="p-3 text-secondary text-xs">
                                    {% if result.description %}
                                    {{ result.description[:120] }}{% if result.description|length > 120 %}...{% endif %}
                                    {% else %}
                                    ‚Äî
                                    {% endif %}
                                </td>
                                <td class="text-center p-3 text-xs">{{ result.imdb_id }}</td>
                                <td class="text-center p-3">
                                    <button class="btn-big select-imdb-btn" data-imdb-id="{{ result.imdb_id }}"
                                        data-title="{{ result.title }}" title="Select this result">
                                        Select
                                    </button>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                {% else %}
                <div class="text-center py-4">
                    <div class="text-4xl mb-4">üîç</div>
                    <h3 class="text-xl font-semibold mb-2">No Results Found</h3>
                    <p class="text-secondary mb-4">
                        No IMDb results were found for "{{ media_title }}".
                    </p>
                    <a href="{{ url_for('admin.media_edit', media_id=media.id) }}" class="btn">
                        Back to Edit
                    </a>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Handle IMDb result selection
        const selectButtons = document.querySelectorAll('.select-imdb-btn');

        // Helper function to get CSRF token
        function getCsrfToken() {
            const input = document.querySelector('input[name="csrf_token"]');
            if (input && input.value) return input.value;
            const m = document.cookie && document.cookie.match(/(?:^|; )csrf_token=([^;]+)/);
            return m ? decodeURIComponent(m[1]) : '';
        }

        // Helper function to show toast notification
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.textContent = message;
            toast.style.position = 'fixed';
            toast.style.top = '16px';
            toast.style.right = '16px';
            toast.style.zIndex = '9999';
            toast.style.padding = '12px 16px';
            toast.style.borderRadius = '8px';
            toast.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
            toast.style.color = isError ? '#fff' : '#0f5132';
            toast.style.background = isError ? '#dc3545' : '#d1e7dd';
            toast.style.border = isError ? '1px solid #b02a37' : '1px solid #badbcc';
            toast.style.opacity = '0';
            toast.style.transition = 'opacity 150ms ease';
            document.body.appendChild(toast);
            requestAnimationFrame(() => { toast.style.opacity = '1'; });
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Helper function to disable all select buttons
        function disableAllSelectButtons() {
            selectButtons.forEach(button => {
                button.disabled = true;
                button.style.opacity = '0.5';
                button.style.cursor = 'not-allowed';
            });
        }

        // Helper function to enable all select buttons
        function enableAllSelectButtons() {
            selectButtons.forEach(button => {
                button.disabled = false;
                button.style.opacity = '1';
                button.style.cursor = 'pointer';
                button.textContent = 'Select This Result';
            });
        }

        // Store IMDb data in sessionStorage for media_edit page
        function storeImdbDataInSession(data) {
            try {
                // Add media_id to the stored data for validation
                const dataWithMediaId = {
                    ...data,
                    media_id: {{ media.id }
            }
            }


    }
    };
    sessionStorage.setItem('imdb_selection_data', JSON.stringify(dataWithMediaId));
    sessionStorage.setItem('imdb_selection_timestamp', Date.now().toString());
    } catch (error) {
        console.warn('Failed to store IMDb data in session storage:', error);
    }
    }

    selectButtons.forEach(button => {
        button.addEventListener('click', function () {
            const imdbId = this.dataset.imdbId;
            const title = this.dataset.title;
            const mediaId = {{ media.id }
        };

        // Store original button text for potential restoration
        const originalText = this.textContent;

        // Disable all buttons to prevent multiple selections
        disableAllSelectButtons();

        // Show loading state on clicked button
        this.textContent = 'Loading...';

        // Show loading toast
        showToast('Fetching IMDb data...', false);

        // Make AJAX request to select the IMDb result
        fetch(`/admin/media/${mediaId}/pull-imdb/select/${imdbId}`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': getCsrfToken(),
                'X-CSRF-Token': getCsrfToken()
            }
        })
            .then(response => {
                // Check if response is ok before parsing JSON
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Store the IMDb data in sessionStorage for the media_edit page
                    storeImdbDataInSession(data);

                    // Show success message
                    showToast('IMDb data successfully imported!', false);

                    // Brief delay to show success message before redirect
                    setTimeout(() => {
                        // Redirect back to media edit page with success parameters
                        window.location.href = `/admin/media_edit/${mediaId}?imdb_success=true&message=IMDb data successfully imported`;
                    }, 500);
                } else {
                    // Handle error response
                    throw new Error(data.error || 'Failed to select IMDb result');
                }
            })
            .catch(error => {
                console.error('Error selecting IMDb result:', error);

                // Show error toast
                showToast(`Error: ${error.message || 'Failed to fetch IMDb data'}`, true);

                // Restore button state
                this.textContent = originalText;

                // Re-enable all buttons
                enableAllSelectButtons();
            });
    });
    });
});
</script>

{% endblock %}
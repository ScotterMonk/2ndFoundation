# -*- coding: utf-8 -*-
"""
Route helper utilities for standardized handling of admin/user utility results.

Provides small helpers used by routes to interpret utility return values and
perform the appropriate response: render a template, flash+redirect, or return JSON.

# Created by Roo | 2025-10-16
"""

from typing import Any, Dict, Optional
from flask import render_template, redirect, url_for, flash, jsonify


def _flash_message(message: Optional[str], category: Optional[str]) -> None:
    """Flash a message if provided."""
    # Created by Roo | 2025-10-16
    if message:
        flash(message, category or "info")


def handle_util_result(result: Dict[str, Any], redirect_url: Optional[str] = None):
    """
    Handle a utility result dictionary with common keys:
      - success: bool
      - template: str (jinja template path)
      - data: dict (context for template)
      - message: str (flash message)
      - message_type: str ('success' | 'info' | 'warning' | 'error')
      - redirect: str (endpoint name or absolute URL)

    If template present: render it.
    Else if redirect present: flash and redirect there.
    Else if redirect_url provided: flash and redirect to redirect_url.
    Else if result looks like JSON payload: return jsonify(result).
    """
    # Created by Roo | 2025-10-16
    if not isinstance(result, dict):
        return result  # fallback passthrough

    success = result.get("success", True)
    message = result.get("message")
    category = result.get("message_type") or ("success" if success else "error")

    # Render template if provided
    if "template" in result:
        _flash_message(message, category)
        context = result.get("data") or {}
        return render_template(result["template"], **context)

    # Redirect if specified by the util
    if "redirect" in result and result["redirect"]:
        _flash_message(message, category)
        target = result["redirect"]
        # If target looks like a URL path, redirect directly; otherwise treat as endpoint name
        if target.startswith("/") or target.startswith("http"):
            return redirect(target)
        return redirect(url_for(target))

    # Fallback redirect if provided by caller
    if redirect_url:
        _flash_message(message, category)
        return redirect(redirect_url)

    # As a final fallback, return JSON for API-like responses
    return jsonify(result)


def handle_simple_util_result(result: Dict[str, Any], default_template: str):
    """
    Simpler handler when a route expects to render a known template,
    using the util's returned 'data' context. If the util returned a redirect or message,
    defer to handle_util_result for correct behavior.
    """
    # Created by Roo | 2025-10-16
    if not isinstance(result, dict):
        return result

    # If util wants redirect/template handling, delegate to the general handler
    if any(k in result for k in ("template", "redirect", "message", "message_type")):
        return handle_util_result(result)

    # Otherwise render the default template with provided data
    context = result.get("data") or {}
    return render_template(default_template, **context)


def handle_delete_result(success: bool, message: str, message_type: str, redirect_url: str):
    """
    Specialized helper for delete operations returning (success, message, message_type).
    Always flashes and redirects to redirect_url.
    """
    # Created by Roo | 2025-10-16
    _flash_message(message, message_type or ("success" if success else "error"))
    # redirect_url may be a full URL or a path; treat as-is
    if redirect_url.startswith("/") or redirect_url.startswith("http"):
        return redirect(redirect_url)
    # else treat as endpoint name
    return redirect(url_for(redirect_url))
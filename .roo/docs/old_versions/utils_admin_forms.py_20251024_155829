# Created by Gemini 2.5 Flash | 2025-10-24
"""
Flask-aware admin form utilities.
This module contains helpers for extracting and normalizing query params.
"""

from typing import Any, Dict, Optional

# Allowed values for sanitization
ALLOWED_SORTS = {"created_at", "title", "rating", "type"}
ALLOWED_DIRECTIONS = {"asc", "desc"}

def extract_search_params(request) -> dict:
    """
    Extracts and normalizes search parameters from the Flask request object.

    Args:
        request: The Flask request object.

    Returns:
        dict: A dictionary containing normalized search parameters:
              {search_term: str, genre_id: int | None, sort: str, direction: str}
    """
    # Created by Gemini 2.5 Flash | 2025-10-24
    args: Dict[str, Any] = getattr(request, "args", {}) or {}

    # search_term: prefer 'q', fallback to 'search', default ""
    raw_search = args.get("q")
    if raw_search is None:
        raw_search = args.get("search", "")
    search_term = str(raw_search).strip() if raw_search is not None else ""

    # genre_id: optional int
    raw_genre = args.get("genre_id")
    genre_id: Optional[int]
    if raw_genre is None or str(raw_genre).strip() == "":
        genre_id = None
    else:
        try:
            genre_id = int(raw_genre)
        except (TypeError, ValueError):
            genre_id = None

    # sort and direction with sanitization
    sort_default = "created_at"
    direction_default = "desc"

    raw_sort = args.get("sort", sort_default)
    sort = str(raw_sort).strip().lower()
    if sort not in ALLOWED_SORTS:
        sort = sort_default

    raw_direction = args.get("direction", direction_default)
    direction = str(raw_direction).strip().lower()
    if direction not in ALLOWED_DIRECTIONS:
        direction = direction_default

    return {
        "search_term": search_term,
        "genre_id": genre_id,
        "sort": sort,
        "direction": direction,
    }
# Created by code-monkey | 2025-10-22

import requests
import requests.adapters
from urllib3.util.retry import Retry
import time
import os
import json


class BaseApiProvider:
    """
    A foundational class for all external API interactions.
    This class is stateless and free of any Flask-specific imports or context.
    """

    def __init__(self, provider_descriptor: dict):
        """
        Initializes the API provider with a descriptor dictionary.

        Args:
            provider_descriptor (dict): A dictionary containing provider configuration.
                                       Expected keys: 'base_url', 'name', 'header_builder'.
        """
        self.descriptor = provider_descriptor
        self.session = self._create_session()

    def _create_session(self) -> requests.Session:
        """
        Creates and configures a requests.Session with a retry strategy.

        Returns:
            requests.Session: A configured session instance.
        """
        session = requests.Session()
        retry_strategy = Retry(
            total=3,
            backoff_factor=0.5,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = requests.adapters.HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        return session

    def get(self, endpoint: str, params: dict = None, headers_override: dict = None) -> dict:
        """
        Executes a GET request to the specified endpoint.

        Args:
            endpoint (str): The API endpoint to query.
            params (dict, optional): A dictionary of query parameters. Defaults to None.
            headers_override (dict, optional): A dictionary to override default headers. Defaults to None.

        Returns:
            dict: A standardized response dictionary.
        """
        url = f"{self.descriptor.get('base_url')}{endpoint}"
        headers = headers_override or self.descriptor.get('header_builder', lambda: {})()

        try:
            response = self.session.get(url, params=params, headers=headers)
            response.raise_for_status()
            return {
                'success': True,
                'provider': self.descriptor.get('name', 'Unknown'),
                'status_code': response.status_code,
                'error': None,
                'data': response.json() if response.content else None
            }
        except requests.exceptions.RequestException as e:
            return {
                'success': False,
                'provider': self.descriptor.get('name', 'Unknown'),
                'status_code': e.response.status_code if e.response is not None else None,
                'error': str(e),
                'data': None
            }
        except json.JSONDecodeError as e:
            return {
                'success': False,
                'provider': self.descriptor.get('name', 'Unknown'),
                'status_code': 200,  # Response was received, but body was not valid JSON
                'error': f"Failed to decode JSON response: {str(e)}",
                'data': None
            }
        except Exception as e:
            return {
                'success': False,
                'provider': self.descriptor.get('name', 'Unknown'),
                'status_code': None,
                'error': f"An unexpected error occurred: {str(e)}",
                'data': None
            }